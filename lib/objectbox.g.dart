// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'MVVM/Models/trainee.dart';
import 'MVVM/Models/traininghistoryschedules.dart';
import 'MVVM/Models/trainingselement.dart';
import 'MVVM/Models/trainingsschedule.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3917838674679280242),
      name: 'HistorySchedule',
      lastPropertyId: const obx_int.IdUid(6, 8839921143684130920),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3381281895804349410),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 444527647435718080),
            name: 'name',
            type: 9,
            flags: 8,
            indexId: const obx_int.IdUid(1, 688185055747617910)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3137707101366397214),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6097774481100034049),
            name: 'kcal',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 448936638178225874),
            name: 'locationSpecific',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8839921143684130920),
            name: 'scheduleId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 5471397937120517371),
            relationTarget: 'TrainingsSchedule')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 4508044007864878874),
            name: 'scheduleItems',
            targetId: const obx_int.IdUid(2, 6002293373422659904))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6002293373422659904),
      name: 'TrainingsElement',
      lastPropertyId: const obx_int.IdUid(10, 3241992577354177632),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5691397833387602726),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4341722667614846438),
            name: 'name',
            type: 9,
            flags: 8,
            indexId: const obx_int.IdUid(3, 7313927449248746928)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2454858554864763241),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8330051476428744276),
            name: 'sets',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4175848272627537598),
            name: 'iterations',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1852195840278539706),
            name: 'weight',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2098262437501227057),
            name: 'kcal',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8658614265635617852),
            name: 'locationSpecific',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8011281624134834194),
            name: 'scheduleId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 724633429074839309),
            relationTarget: 'TrainingsSchedule'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3241992577354177632),
            name: 'duration',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 6635498724338019789),
      name: 'TrainingsSchedule',
      lastPropertyId: const obx_int.IdUid(5, 6086135005133280207),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2924901157309628751),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6174622514484058820),
            name: 'name',
            type: 9,
            flags: 8,
            indexId: const obx_int.IdUid(5, 75960407023712919)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3467651707387677876),
            name: 'kcal',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6697704635309780092),
            name: 'locationSpecific',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6086135005133280207),
            name: 'traineeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 4478235318709833697),
            relationTarget: 'Trainee')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2452244673790064294),
      name: 'Trainee',
      lastPropertyId: const obx_int.IdUid(3, 4261230299281221599),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 768560819760001811),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8986414139014846624),
            name: 'firstName',
            type: 9,
            flags: 8,
            indexId: const obx_int.IdUid(7, 4659516841138955146)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4261230299281221599),
            name: 'lastName',
            type: 9,
            flags: 8,
            indexId: const obx_int.IdUid(8, 5144062280875159370))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'schedules',
            srcEntity: 'TrainingsSchedule',
            srcField: 'trainee')
      ])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 2452244673790064294),
      lastIndexId: const obx_int.IdUid(8, 5144062280875159370),
      lastRelationId: const obx_int.IdUid(1, 4508044007864878874),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    HistorySchedule: obx_int.EntityDefinition<HistorySchedule>(
        model: _entities[0],
        toOneRelations: (HistorySchedule object) => [object.schedule],
        toManyRelations: (HistorySchedule object) => {
              obx_int.RelInfo<HistorySchedule>.toMany(1, object.id):
                  object.scheduleItems
            },
        getId: (HistorySchedule object) => object.id,
        setId: (HistorySchedule object, int id) {
          object.id = id;
        },
        objectToFB: (HistorySchedule object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.date.millisecondsSinceEpoch);
          fbb.addInt64(3, object.kcal);
          fbb.addBool(4, object.locationSpecific);
          fbb.addInt64(5, object.schedule.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HistorySchedule()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..date = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..kcal = const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..locationSpecific =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          object.schedule.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.schedule.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<HistorySchedule>(
              object.scheduleItems,
              store,
              obx_int.RelInfo<HistorySchedule>.toMany(1, object.id));
          return object;
        }),
    TrainingsElement: obx_int.EntityDefinition<TrainingsElement>(
        model: _entities[1],
        toOneRelations: (TrainingsElement object) => [object.schedule],
        toManyRelations: (TrainingsElement object) => {},
        getId: (TrainingsElement object) => object.id,
        setId: (TrainingsElement object, int id) {
          object.id = id;
        },
        objectToFB: (TrainingsElement object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.sets);
          fbb.addInt64(4, object.iterations);
          fbb.addInt64(5, object.weight);
          fbb.addInt64(6, object.kcal);
          fbb.addBool(7, object.locationSpecific);
          fbb.addInt64(8, object.schedule.targetId);
          fbb.addInt64(9, object.duration);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TrainingsElement()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..sets = const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..iterations =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..weight =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..kcal = const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..locationSpecific =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false)
            ..duration =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.schedule.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.schedule.attach(store);
          return object;
        }),
    TrainingsSchedule: obx_int.EntityDefinition<TrainingsSchedule>(
        model: _entities[2],
        toOneRelations: (TrainingsSchedule object) => [object.trainee],
        toManyRelations: (TrainingsSchedule object) => {},
        getId: (TrainingsSchedule object) => object.id,
        setId: (TrainingsSchedule object, int id) {
          object.id = id;
        },
        objectToFB: (TrainingsSchedule object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.kcal);
          fbb.addBool(3, object.locationSpecific);
          fbb.addInt64(4, object.trainee.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TrainingsSchedule()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..kcal = const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..locationSpecific =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          object.trainee.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.trainee.attach(store);
          return object;
        }),
    Trainee: obx_int.EntityDefinition<Trainee>(
        model: _entities[3],
        toOneRelations: (Trainee object) => [],
        toManyRelations: (Trainee object) => {
              obx_int.RelInfo<TrainingsSchedule>.toOneBacklink(5, object.id,
                      (TrainingsSchedule srcObject) => srcObject.trainee):
                  object.schedules
            },
        getId: (Trainee object) => object.id,
        setId: (Trainee object, int id) {
          object.id = id;
        },
        objectToFB: (Trainee object, fb.Builder fbb) {
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, firstNameOffset);
          fbb.addOffset(2, lastNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = Trainee(
              id: idParam, firstName: firstNameParam, lastName: lastNameParam);
          obx_int.InternalToManyAccess.setRelInfo<Trainee>(
              object.schedules,
              store,
              obx_int.RelInfo<TrainingsSchedule>.toOneBacklink(5, object.id,
                  (TrainingsSchedule srcObject) => srcObject.trainee));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [HistorySchedule] entity fields to define ObjectBox queries.
class HistorySchedule_ {
  /// see [HistorySchedule.id]
  static final id =
      obx.QueryIntegerProperty<HistorySchedule>(_entities[0].properties[0]);

  /// see [HistorySchedule.name]
  static final name =
      obx.QueryStringProperty<HistorySchedule>(_entities[0].properties[1]);

  /// see [HistorySchedule.date]
  static final date =
      obx.QueryDateProperty<HistorySchedule>(_entities[0].properties[2]);

  /// see [HistorySchedule.kcal]
  static final kcal =
      obx.QueryIntegerProperty<HistorySchedule>(_entities[0].properties[3]);

  /// see [HistorySchedule.locationSpecific]
  static final locationSpecific =
      obx.QueryBooleanProperty<HistorySchedule>(_entities[0].properties[4]);

  /// see [HistorySchedule.schedule]
  static final schedule =
      obx.QueryRelationToOne<HistorySchedule, TrainingsSchedule>(
          _entities[0].properties[5]);

  /// see [HistorySchedule.scheduleItems]
  static final scheduleItems =
      obx.QueryRelationToMany<HistorySchedule, TrainingsElement>(
          _entities[0].relations[0]);
}

/// [TrainingsElement] entity fields to define ObjectBox queries.
class TrainingsElement_ {
  /// see [TrainingsElement.id]
  static final id =
      obx.QueryIntegerProperty<TrainingsElement>(_entities[1].properties[0]);

  /// see [TrainingsElement.name]
  static final name =
      obx.QueryStringProperty<TrainingsElement>(_entities[1].properties[1]);

  /// see [TrainingsElement.description]
  static final description =
      obx.QueryStringProperty<TrainingsElement>(_entities[1].properties[2]);

  /// see [TrainingsElement.sets]
  static final sets =
      obx.QueryIntegerProperty<TrainingsElement>(_entities[1].properties[3]);

  /// see [TrainingsElement.iterations]
  static final iterations =
      obx.QueryIntegerProperty<TrainingsElement>(_entities[1].properties[4]);

  /// see [TrainingsElement.weight]
  static final weight =
      obx.QueryIntegerProperty<TrainingsElement>(_entities[1].properties[5]);

  /// see [TrainingsElement.kcal]
  static final kcal =
      obx.QueryIntegerProperty<TrainingsElement>(_entities[1].properties[6]);

  /// see [TrainingsElement.locationSpecific]
  static final locationSpecific =
      obx.QueryBooleanProperty<TrainingsElement>(_entities[1].properties[7]);

  /// see [TrainingsElement.schedule]
  static final schedule =
      obx.QueryRelationToOne<TrainingsElement, TrainingsSchedule>(
          _entities[1].properties[8]);

  /// see [TrainingsElement.duration]
  static final duration =
      obx.QueryIntegerProperty<TrainingsElement>(_entities[1].properties[9]);
}

/// [TrainingsSchedule] entity fields to define ObjectBox queries.
class TrainingsSchedule_ {
  /// see [TrainingsSchedule.id]
  static final id =
      obx.QueryIntegerProperty<TrainingsSchedule>(_entities[2].properties[0]);

  /// see [TrainingsSchedule.name]
  static final name =
      obx.QueryStringProperty<TrainingsSchedule>(_entities[2].properties[1]);

  /// see [TrainingsSchedule.kcal]
  static final kcal =
      obx.QueryIntegerProperty<TrainingsSchedule>(_entities[2].properties[2]);

  /// see [TrainingsSchedule.locationSpecific]
  static final locationSpecific =
      obx.QueryBooleanProperty<TrainingsSchedule>(_entities[2].properties[3]);

  /// see [TrainingsSchedule.trainee]
  static final trainee = obx.QueryRelationToOne<TrainingsSchedule, Trainee>(
      _entities[2].properties[4]);
}

/// [Trainee] entity fields to define ObjectBox queries.
class Trainee_ {
  /// see [Trainee.id]
  static final id =
      obx.QueryIntegerProperty<Trainee>(_entities[3].properties[0]);

  /// see [Trainee.firstName]
  static final firstName =
      obx.QueryStringProperty<Trainee>(_entities[3].properties[1]);

  /// see [Trainee.lastName]
  static final lastName =
      obx.QueryStringProperty<Trainee>(_entities[3].properties[2]);

  /// see [Trainee.schedules]
  static final schedules = obx.QueryBacklinkToMany<TrainingsSchedule, Trainee>(
      TrainingsSchedule_.trainee);
}
